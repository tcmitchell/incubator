#!/usr/bin/env python

#----------------------------------------------------------------------
# Print a CHANGES file in GitHub Flavored Markdown
#
# Sample call:
#    ghchanges -m 3.2 -o GENI-NSF -r geni-portal > changes.md
#
#----------------------------------------------------------------------

import argparse
import json
import re
import sys
import urllib
import urllib2

# Get all issues on a milestone
sample_url = 'https://api.github.com/repos/GENI-NSF/geni-portal/issues?milestone=74&state=all'

#milestone='next-minor-release'
#owner='GENI-NSF'
#repo='geni-portal'
base_url = 'https://api.github.com/repos'

class GitHubService(object):

    base_url = 'https://api.github.com/repos'

    def __init__(self):
        pass

    def get_next_link(self, response):
        """Extract the link to the next set of issues.

        The GitHub API returns 30 issues at a time. The response
        headers include a link to the next 'page' of issues. Extract
        it and return it. Return None if no next link is present.

        The link header is a comma-separated list of links:

            '<https://api.github.com/...>; rel="next", <URL>; rel="last"'
        """
        result = None
        link_header = response.headers.getheader('link')
        if link_header:
            links = [l.strip() for l in link_header.split(',')]
            p = re.compile('^<(.*)>; rel="(.*)"$')
            for link in links:
                m = p.match(link)
                if m and m.group(2) == 'next':
                    result = m.group(1)
                    break
        return result

class GitHubMilestoneService(GitHubService):
    def __init__(self):
        pass

    def get(self, owner, repo, milestone, **kwargs):
        """Get all milestones matching parameters. Specify parameters
        using arbitrary keyword arguments. For instance, state=all or
        state=closed.
        """
        url = '%s/%s/%s/milestones' % (self.base_url, owner, repo)
        if kwargs:
            query_string = urllib.urlencode(kwargs)
            url = url + '?' + query_string
        while url:
            print url
            response = urllib2.urlopen(url)
            url = self.get_next_link(response)
            raw = response.read()
            milestones = json.loads(raw)
            found = None
            for m in milestones:
                title = m['title']
                if title == milestone:
                    found = Milestone(owner, repo, m)
                    return found

class GitHubObject(object):
    def __init__(self, owner, repo, json_data):
        self.data = json_data
        self.owner = owner
        self.repo = repo

class Issue(GitHubObject):
    @property
    def title(self):
        return self.data['title']

    @property
    def number(self):
        return self.data['number']

    @property
    def html_url(self):
        return self.data['html_url']

    @property
    def is_pull_request(self):
        return 'pull_request' in self.data

    def md_string(self):
        prefix = ''
        if self.is_pull_request:
            prefix = 'PR '
        format = '%s (%s[#%d](%s))'
        return format % (self.title, prefix, self.number, self.html_url)

class Milestone(GitHubObject):

    @classmethod
    def find(cls, name, owner, repo):
        url = '%s/%s/%s/milestones?state=all' % (base_url, owner, repo)
        response = urllib2.urlopen(url)
        raw = response.read()
        milestones = json.loads(raw)
        found = None
        for m in milestones:
            title = m['title']
            if title == name:
                found = Milestone(owner, repo, m)
                break
        return found

    @property
    def number(self):
        return self.data['number']

    @property
    def title(self):
        return self.data['title']

    def issues(self):
        ms_number = self.number
        issue_url = '%s/%s/%s/issues?milestone=%d&state=all'
        issue_url = issue_url % (base_url, self.owner, self.repo, ms_number)
        response = urllib2.urlopen(issue_url)
        raw = response.read()
        issues = json.loads(raw)
        return [Issue(self.owner, self.repo, json_data)
                for json_data in issues]

def print_header(hdr, level=1):
    print '#' * level,
    print hdr

def print_changes_1(milestone, issues):
    # print header
    # print issues
    # print pull requests
    hdr = "Release %s" % (milestone.title)
    print_header(hdr, 1)
    print
    print_header("Issues Closed", 2)
    print
    pull_requests = []
    for i in issues:
        if i.is_pull_request:
            pull_requests.append(i)
        else:
            print "* %s" % (i.md_string())
    print
    print_header("Pull Requests Merged", 2)
    print
    for p in pull_requests:
        print "* %s" % (p.md_string())

def do_stuff(milestone, owner, repo):
    # Find the milestone
    ghms = GitHubMilestoneService()
    m = ghms.get(owner, repo, milestone, state='all')
#    m = Milestone.find(milestone, owner, repo)

    if not m:
        print 'Milestone %s not found' % (milestone)
        sys.exit(1)

    print_changes_1(m, m.issues())
    return

    issues = m.issues()

    # Print milestone header
    print milestone
    print '-' * len(milestone)
    print

    # Print bullets for each issue and pull request
    for i in issues:
        if i.is_pull_request:
            continue
        print ' * %s' % (i.md_string())

def parse_args(args):
    parser = argparse.ArgumentParser(description='Generate changes file.')
    parser.add_argument('-m', '--milestone', metavar='MILESTONE',
                       help='a milestone name')
    parser.add_argument('-o', '--owner', metavar='OWNER',
                       help='GitHub repository owner')
    parser.add_argument('-r', '--repository', metavar='REPO',
                       help='GitHub repository')
    return parser.parse_args()

def main(argv=None):
    if argv is None:
        argv = sys.argv
    args = parse_args(argv)
    # Need to validate arguments or put good defaults in place
    # Actually, since they are required, make them so in argparse
    # by not making them "options".
    do_stuff(args.milestone, args.owner, args.repository)

if __name__ == "__main__":
    sys.exit(main())
